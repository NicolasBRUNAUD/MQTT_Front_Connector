// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE

import {amqtt} from "./asyncmqtt.js"

// END EXTRA CODE

/**
 * @param {string} mqttServerURL - Example : "ws://192.168.222.129:9001"
 * @param {string} toTopic
 * @param {Nanoflow} onMessageNanoflow - Use the provided template as a starting point because the input parameters names are hardcoded in the javascript action
 * @param {MxObject} subscriberContext - Context object, it will be available in the triggered nanoflow as an input. It can typically be used to gather all the messages received for a topic ( like for timeseries).
can be empty.
 * @param {boolean} keepClientOpened - If true, you will be able to end the client by sending the the keyword "MqttClientEnd" as a payload message. 
If false, the client will end after the first received message.
 * @returns {Promise.<void>}
 */
export async function MQTT_Front_Subcribe(mqttServerURL, toTopic, onMessageNanoflow, subscriberContext, keepClientOpened) {
	// BEGIN USER CODE

			const client = await amqtt.connectAsync(mqttServerURL)
			const toTopicLocal = await toTopic
			const subscriberContextLocal = await subscriberContext
			const keepClientOpenedLocal = await keepClientOpened
			//console.log("Starting");

			try {
				await client.subscribe(toTopicLocal);
				console.log("subscribe Done");
			} catch (e){
				console.log('Error on subscribtion for ' );
				console.log(e.stack);
				//process.exit();
			}		


			try {
				await client.on('message', async (topic, payload, packet) =>  {
					// When a message is received
					const payloadStr = await payload.toString();
					if ( payloadStr=='MqttClientEnd' ) {
						// the end keyword force the end of the client
						client.end();
					} else {
						// Trigger a nanoflow with the received message
						try {
							//console.log("Received in front : topic :"+topic+ " | payload : " + payload+ " | frontSubscribtor : " + subscriberContextLocal.getGuid());
							await onMessageNanoflow({TopicParam:topic,PayloadParam:payloadStr,MqttFrontSubscriberContext:subscriberContextLocal});
						} catch (e){
							console.log('Error on nanoflow call ' );
							console.log(e.stack);
							//process.exit();
						}	
						if (!(keepClientOpenedLocal)) {
							await client.end();
						}
					}
				});

			} catch (e){
				console.log('Error on subscribtion Action definition');
				console.log(e.stack);
				//process.exit();
			}
	
	// END USER CODE
}
