// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import {createMxObj,GetMxObj,CallRemove,CallCommit,MqttFront_ClientConnect} from  "./MqttFront_Routines.js";
import {MQTT_Front_Subcribe} from "./MQTT_Front_Subcribe.js"

// END EXTRA CODE

/**
 * Force the end of a client opened with option "untilEndOfSession".
 * Tag the SubscriberContext, the change is detected by the client which will close.
 * @param {MxObject} subscriberContext - Will close the client that was created on registration
 * @returns {Promise.<void>}
 */
export async function MQTT_Front_Unsubscribe(subscriberContext) {
	// BEGIN USER CODE
		console.info('MqttFront : Start of MQTT_Front_Unsubscribe' );
		var subscriberContext_MendixUID = await subscriberContext.getGuid() ;
		await subscriberContext.set("Unsubscribe",true);
		await CallCommit(subscriberContext);
		/*
		await mx.data.commit({ 
			mxobj: subscriberContext,
			callback: function() {
				console.log("Object committed");
			},
			error: function(e) {
				console.error("Could not commit object:", e);
			}
		});
		*/
		//await subscriberContext.save;
		
		/*
		var mqttServerURL= await subscriberContext.get("ServerUrl");
		var topic= await subscriberContext.get("Topic");
		var MqttClientUid= await subscriberContext.get("MqttClientUID");
		try {					
			var client = await MqttFront_ClientConnect(mqttServerURL,MqttClientUid,undefined,userName,password);
		} catch (e){
			//console.log(e.stack);
			throw new Error('MqttFront : ERROR when reconnecting : ' + mqttServerURL + ' - MqttClientUid : ' + MqttClientUid + ' - topic : ' + topic);
		}	
		try {		
			//await MQTT_Front_Subcribe(undefined,undefined,undefined,subscriberContext,undefined,undefined,false,undefined,undefined)	;		
			await client.end(true);
			console.info('MqttFront : unsubscribe : ' + mqttServerURL + ' - MqttClientUid : ' + MqttClientUid + ' - topic : ' + topic);
		} catch (e){
			//console.log(e.stack);
			throw new Error('MqttFront : ERROR when unsubscribing');
		}	
		*/

	
	// END USER CODE
}
